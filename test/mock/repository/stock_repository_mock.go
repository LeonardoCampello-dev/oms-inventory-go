// Code generated by MockGen. DO NOT EDIT.
// Source: domain/stock/repository/stock_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	stockentity "github.com/1EG/oms-inventory-go/domain/stock/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockStockRepository is a mock of StockRepository interface.
type MockStockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStockRepositoryMockRecorder
}

// MockStockRepositoryMockRecorder is the mock recorder for MockStockRepository.
type MockStockRepositoryMockRecorder struct {
	mock *MockStockRepository
}

// NewMockStockRepository creates a new mock instance.
func NewMockStockRepository(ctrl *gomock.Controller) *MockStockRepository {
	mock := &MockStockRepository{ctrl: ctrl}
	mock.recorder = &MockStockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStockRepository) EXPECT() *MockStockRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStockRepository) Delete(sku string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sku)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStockRepositoryMockRecorder) Delete(sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStockRepository)(nil).Delete), sku)
}

// FindBySku mocks base method.
func (m *MockStockRepository) FindBySku(sku string) (*stockentity.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySku", sku)
	ret0, _ := ret[0].(*stockentity.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySku indicates an expected call of FindBySku.
func (mr *MockStockRepositoryMockRecorder) FindBySku(sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySku", reflect.TypeOf((*MockStockRepository)(nil).FindBySku), sku)
}

// GetAll mocks base method.
func (m *MockStockRepository) GetAll() ([]*stockentity.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*stockentity.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStockRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStockRepository)(nil).GetAll))
}

// Save mocks base method.
func (m *MockStockRepository) Save(stock *stockentity.Stock) (*stockentity.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", stock)
	ret0, _ := ret[0].(*stockentity.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockStockRepositoryMockRecorder) Save(stock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStockRepository)(nil).Save), stock)
}
