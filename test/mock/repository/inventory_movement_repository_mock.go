// Code generated by MockGen. DO NOT EDIT.
// Source: domain/stock/repository/inventory_movement_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	stockentity "github.com/1EG/oms-inventory-go/domain/stock/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockInventoryMovementRepository is a mock of InventoryMovementRepository interface.
type MockInventoryMovementRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryMovementRepositoryMockRecorder
}

// MockInventoryMovementRepositoryMockRecorder is the mock recorder for MockInventoryMovementRepository.
type MockInventoryMovementRepositoryMockRecorder struct {
	mock *MockInventoryMovementRepository
}

// NewMockInventoryMovementRepository creates a new mock instance.
func NewMockInventoryMovementRepository(ctrl *gomock.Controller) *MockInventoryMovementRepository {
	mock := &MockInventoryMovementRepository{ctrl: ctrl}
	mock.recorder = &MockInventoryMovementRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryMovementRepository) EXPECT() *MockInventoryMovementRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockInventoryMovementRepository) Save(inventoryMovement *stockentity.InventoryMovement) (*stockentity.InventoryMovement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", inventoryMovement)
	ret0, _ := ret[0].(*stockentity.InventoryMovement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockInventoryMovementRepositoryMockRecorder) Save(inventoryMovement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockInventoryMovementRepository)(nil).Save), inventoryMovement)
}
